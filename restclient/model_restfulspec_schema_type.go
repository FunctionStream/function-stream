/*
Function Stream Service

Manage Function Stream Resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package restclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RestfulspecSchemaType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestfulspecSchemaType{}

// RestfulspecSchemaType struct for RestfulspecSchemaType
type RestfulspecSchemaType struct {
	Format  string `json:"Format"`
	RawType string `json:"RawType"`
}

type _RestfulspecSchemaType RestfulspecSchemaType

// NewRestfulspecSchemaType instantiates a new RestfulspecSchemaType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestfulspecSchemaType(format string, rawType string) *RestfulspecSchemaType {
	this := RestfulspecSchemaType{}
	this.Format = format
	this.RawType = rawType
	return &this
}

// NewRestfulspecSchemaTypeWithDefaults instantiates a new RestfulspecSchemaType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestfulspecSchemaTypeWithDefaults() *RestfulspecSchemaType {
	this := RestfulspecSchemaType{}
	return &this
}

// GetFormat returns the Format field value
func (o *RestfulspecSchemaType) GetFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Format
}

// GetFormatOk returns a tuple with the Format field value
// and a boolean to check if the value has been set.
func (o *RestfulspecSchemaType) GetFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Format, true
}

// SetFormat sets field value
func (o *RestfulspecSchemaType) SetFormat(v string) {
	o.Format = v
}

// GetRawType returns the RawType field value
func (o *RestfulspecSchemaType) GetRawType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RawType
}

// GetRawTypeOk returns a tuple with the RawType field value
// and a boolean to check if the value has been set.
func (o *RestfulspecSchemaType) GetRawTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RawType, true
}

// SetRawType sets field value
func (o *RestfulspecSchemaType) SetRawType(v string) {
	o.RawType = v
}

func (o RestfulspecSchemaType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestfulspecSchemaType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Format"] = o.Format
	toSerialize["RawType"] = o.RawType
	return toSerialize, nil
}

func (o *RestfulspecSchemaType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Format",
		"RawType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestfulspecSchemaType := _RestfulspecSchemaType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestfulspecSchemaType)

	if err != nil {
		return err
	}

	*o = RestfulspecSchemaType(varRestfulspecSchemaType)

	return err
}

type NullableRestfulspecSchemaType struct {
	value *RestfulspecSchemaType
	isSet bool
}

func (v NullableRestfulspecSchemaType) Get() *RestfulspecSchemaType {
	return v.value
}

func (v *NullableRestfulspecSchemaType) Set(val *RestfulspecSchemaType) {
	v.value = val
	v.isSet = true
}

func (v NullableRestfulspecSchemaType) IsSet() bool {
	return v.isSet
}

func (v *NullableRestfulspecSchemaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestfulspecSchemaType(val *RestfulspecSchemaType) *NullableRestfulspecSchemaType {
	return &NullableRestfulspecSchemaType{value: val, isSet: true}
}

func (v NullableRestfulspecSchemaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestfulspecSchemaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
