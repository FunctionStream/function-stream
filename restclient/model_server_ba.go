/*
Function Stream Service

Manage Function Stream Resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package restclient

import (
	"bytes"
	"encoding/json"
	"fmt"
	"os"
)

// checks if the ServerBA type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerBA{}

// ServerBA struct for ServerBA
type ServerBA struct {
	ByteArray *os.File `json:"ByteArray"`
}

type _ServerBA ServerBA

// NewServerBA instantiates a new ServerBA object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerBA(byteArray *os.File) *ServerBA {
	this := ServerBA{}
	this.ByteArray = byteArray
	return &this
}

// NewServerBAWithDefaults instantiates a new ServerBA object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerBAWithDefaults() *ServerBA {
	this := ServerBA{}
	return &this
}

// GetByteArray returns the ByteArray field value
func (o *ServerBA) GetByteArray() *os.File {
	if o == nil {
		var ret *os.File
		return ret
	}

	return o.ByteArray
}

// GetByteArrayOk returns a tuple with the ByteArray field value
// and a boolean to check if the value has been set.
func (o *ServerBA) GetByteArrayOk() (**os.File, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ByteArray, true
}

// SetByteArray sets field value
func (o *ServerBA) SetByteArray(v *os.File) {
	o.ByteArray = v
}

func (o ServerBA) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerBA) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ByteArray"] = o.ByteArray
	return toSerialize, nil
}

func (o *ServerBA) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ByteArray",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerBA := _ServerBA{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerBA)

	if err != nil {
		return err
	}

	*o = ServerBA(varServerBA)

	return err
}

type NullableServerBA struct {
	value *ServerBA
	isSet bool
}

func (v NullableServerBA) Get() *ServerBA {
	return v.value
}

func (v *NullableServerBA) Set(val *ServerBA) {
	v.value = val
	v.isSet = true
}

func (v NullableServerBA) IsSet() bool {
	return v.isSet
}

func (v *NullableServerBA) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerBA(val *ServerBA) *NullableServerBA {
	return &NullableServerBA{value: val, isSet: true}
}

func (v NullableServerBA) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerBA) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
