/*
Function Stream Service

Manage Function Stream Resources

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package restclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SpecSchemaOrStringArray type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpecSchemaOrStringArray{}

// SpecSchemaOrStringArray struct for SpecSchemaOrStringArray
type SpecSchemaOrStringArray struct {
	Property []string `json:"Property"`
	Schema   string   `json:"Schema"`
}

type _SpecSchemaOrStringArray SpecSchemaOrStringArray

// NewSpecSchemaOrStringArray instantiates a new SpecSchemaOrStringArray object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecSchemaOrStringArray(property []string, schema string) *SpecSchemaOrStringArray {
	this := SpecSchemaOrStringArray{}
	this.Property = property
	this.Schema = schema
	return &this
}

// NewSpecSchemaOrStringArrayWithDefaults instantiates a new SpecSchemaOrStringArray object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecSchemaOrStringArrayWithDefaults() *SpecSchemaOrStringArray {
	this := SpecSchemaOrStringArray{}
	return &this
}

// GetProperty returns the Property field value
func (o *SpecSchemaOrStringArray) GetProperty() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Property
}

// GetPropertyOk returns a tuple with the Property field value
// and a boolean to check if the value has been set.
func (o *SpecSchemaOrStringArray) GetPropertyOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Property, true
}

// SetProperty sets field value
func (o *SpecSchemaOrStringArray) SetProperty(v []string) {
	o.Property = v
}

// GetSchema returns the Schema field value
func (o *SpecSchemaOrStringArray) GetSchema() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value
// and a boolean to check if the value has been set.
func (o *SpecSchemaOrStringArray) GetSchemaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Schema, true
}

// SetSchema sets field value
func (o *SpecSchemaOrStringArray) SetSchema(v string) {
	o.Schema = v
}

func (o SpecSchemaOrStringArray) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpecSchemaOrStringArray) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Property"] = o.Property
	toSerialize["Schema"] = o.Schema
	return toSerialize, nil
}

func (o *SpecSchemaOrStringArray) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Property",
		"Schema",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSpecSchemaOrStringArray := _SpecSchemaOrStringArray{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSpecSchemaOrStringArray)

	if err != nil {
		return err
	}

	*o = SpecSchemaOrStringArray(varSpecSchemaOrStringArray)

	return err
}

type NullableSpecSchemaOrStringArray struct {
	value *SpecSchemaOrStringArray
	isSet bool
}

func (v NullableSpecSchemaOrStringArray) Get() *SpecSchemaOrStringArray {
	return v.value
}

func (v *NullableSpecSchemaOrStringArray) Set(val *SpecSchemaOrStringArray) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecSchemaOrStringArray) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecSchemaOrStringArray) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecSchemaOrStringArray(val *SpecSchemaOrStringArray) *NullableSpecSchemaOrStringArray {
	return &NullableSpecSchemaOrStringArray{value: val, isSet: true}
}

func (v NullableSpecSchemaOrStringArray) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecSchemaOrStringArray) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
