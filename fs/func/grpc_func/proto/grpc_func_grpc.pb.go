// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FSReconcileClient is the client API for FSReconcile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FSReconcileClient interface {
	Reconcile(ctx context.Context, opts ...grpc.CallOption) (FSReconcile_ReconcileClient, error)
}

type fSReconcileClient struct {
	cc grpc.ClientConnInterface
}

func NewFSReconcileClient(cc grpc.ClientConnInterface) FSReconcileClient {
	return &fSReconcileClient{cc}
}

func (c *fSReconcileClient) Reconcile(ctx context.Context, opts ...grpc.CallOption) (FSReconcile_ReconcileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FSReconcile_ServiceDesc.Streams[0], "/fs_func.FSReconcile/Reconcile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fSReconcileReconcileClient{stream}
	return x, nil
}

type FSReconcile_ReconcileClient interface {
	Send(*FunctionStatus) error
	Recv() (*FunctionStatus, error)
	grpc.ClientStream
}

type fSReconcileReconcileClient struct {
	grpc.ClientStream
}

func (x *fSReconcileReconcileClient) Send(m *FunctionStatus) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fSReconcileReconcileClient) Recv() (*FunctionStatus, error) {
	m := new(FunctionStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FSReconcileServer is the server API for FSReconcile service.
// All implementations must embed UnimplementedFSReconcileServer
// for forward compatibility
type FSReconcileServer interface {
	Reconcile(FSReconcile_ReconcileServer) error
	mustEmbedUnimplementedFSReconcileServer()
}

// UnimplementedFSReconcileServer must be embedded to have forward compatible implementations.
type UnimplementedFSReconcileServer struct {
}

func (UnimplementedFSReconcileServer) Reconcile(FSReconcile_ReconcileServer) error {
	return status.Errorf(codes.Unimplemented, "method Reconcile not implemented")
}
func (UnimplementedFSReconcileServer) mustEmbedUnimplementedFSReconcileServer() {}

// UnsafeFSReconcileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FSReconcileServer will
// result in compilation errors.
type UnsafeFSReconcileServer interface {
	mustEmbedUnimplementedFSReconcileServer()
}

func RegisterFSReconcileServer(s grpc.ServiceRegistrar, srv FSReconcileServer) {
	s.RegisterService(&FSReconcile_ServiceDesc, srv)
}

func _FSReconcile_Reconcile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FSReconcileServer).Reconcile(&fSReconcileReconcileServer{stream})
}

type FSReconcile_ReconcileServer interface {
	Send(*FunctionStatus) error
	Recv() (*FunctionStatus, error)
	grpc.ServerStream
}

type fSReconcileReconcileServer struct {
	grpc.ServerStream
}

func (x *fSReconcileReconcileServer) Send(m *FunctionStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fSReconcileReconcileServer) Recv() (*FunctionStatus, error) {
	m := new(FunctionStatus)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FSReconcile_ServiceDesc is the grpc.ServiceDesc for FSReconcile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FSReconcile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fs_func.FSReconcile",
	HandlerType: (*FSReconcileServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Reconcile",
			Handler:       _FSReconcile_Reconcile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "fs/func/grpc_func/proto/grpc_func.proto",
}

// FunctionClient is the client API for Function service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FunctionClient interface {
	Process(ctx context.Context, opts ...grpc.CallOption) (Function_ProcessClient, error)
	SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*Response, error)
}

type functionClient struct {
	cc grpc.ClientConnInterface
}

func NewFunctionClient(cc grpc.ClientConnInterface) FunctionClient {
	return &functionClient{cc}
}

func (c *functionClient) Process(ctx context.Context, opts ...grpc.CallOption) (Function_ProcessClient, error) {
	stream, err := c.cc.NewStream(ctx, &Function_ServiceDesc.Streams[0], "/fs_func.Function/Process", opts...)
	if err != nil {
		return nil, err
	}
	x := &functionProcessClient{stream}
	return x, nil
}

type Function_ProcessClient interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type functionProcessClient struct {
	grpc.ClientStream
}

func (x *functionProcessClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *functionProcessClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *functionClient) SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/fs_func.Function/SetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FunctionServer is the server API for Function service.
// All implementations must embed UnimplementedFunctionServer
// for forward compatibility
type FunctionServer interface {
	Process(Function_ProcessServer) error
	SetState(context.Context, *SetStateRequest) (*Response, error)
	mustEmbedUnimplementedFunctionServer()
}

// UnimplementedFunctionServer must be embedded to have forward compatible implementations.
type UnimplementedFunctionServer struct {
}

func (UnimplementedFunctionServer) Process(Function_ProcessServer) error {
	return status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedFunctionServer) SetState(context.Context, *SetStateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedFunctionServer) mustEmbedUnimplementedFunctionServer() {}

// UnsafeFunctionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FunctionServer will
// result in compilation errors.
type UnsafeFunctionServer interface {
	mustEmbedUnimplementedFunctionServer()
}

func RegisterFunctionServer(s grpc.ServiceRegistrar, srv FunctionServer) {
	s.RegisterService(&Function_ServiceDesc, srv)
}

func _Function_Process_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FunctionServer).Process(&functionProcessServer{stream})
}

type Function_ProcessServer interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type functionProcessServer struct {
	grpc.ServerStream
}

func (x *functionProcessServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *functionProcessServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Function_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs_func.Function/SetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionServer).SetState(ctx, req.(*SetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Function_ServiceDesc is the grpc.ServiceDesc for Function service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Function_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fs_func.Function",
	HandlerType: (*FunctionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetState",
			Handler:    _Function_SetState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Process",
			Handler:       _Function_Process_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "fs/func/grpc_func/proto/grpc_func.proto",
}
