/*
 * Copyright 2024 Function Stream Org.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
option go_package = "fs/runtime/external/model";
package fs_external;

message Event {
  string id = 1;
  int64 schemaId = 2;
  bytes payload = 3;
  map<string, string> properties = 4;
}

message Context {
  string functionName = 1;
}

message ReadRequest {
  Context context = 1;
}

message ReadResponse {
  Event event = 1;
}

message WriteRequest {
  Context context = 1;
  bytes payload = 2;
}

message WriteResponse {

}

message CommitRequest {
  Context context = 1;
  string eventId = 2;
}

message CommitResponse {

}

message StateContext {
  Context context = 1;
}

message GetStateRequest {
  StateContext context = 1;
  string key = 2;
}

message GetStateResponse {
  bytes value = 2;
}

message PutStateRequest {
  StateContext context = 1;
  string key = 2;
  bytes value = 3;
}

message PutStateResponse {

}

message ListStatesRequest {
  StateContext context = 1;
  string start_inclusive = 2;
  string end_exclusive = 3;
}

message ListStatesResponse {
  repeated string keys = 1;
}

message DeleteStateRequest {
  StateContext context = 1;
  string key = 2;
}

message DeleteStateResponse {

}

service FunctionService {
  rpc Read(ReadRequest) returns (stream Event);
  rpc Write(WriteRequest) returns (WriteResponse);
  rpc Commit(CommitRequest) returns (CommitResponse);

  rpc PutState(PutStateRequest) returns (PutStateResponse);
  rpc GetState(GetStateRequest) returns (GetStateResponse);
  rpc ListStates(ListStatesRequest) returns (ListStatesResponse);
  rpc DeleteState(DeleteStateRequest) returns (DeleteStateResponse);
}

enum FunctionEventType {
  DEPLOY = 0;
  DELETE = 1;
}

message FunctionEvent {
  FunctionEventType type = 1;
  oneof payload {
    Function function = 2;
    string functionName = 3;
  }
}

message Function {
  string name = 1;
  string package = 2;
  string module = 3;
  map<string, string> config = 4;
}

message OnDeployRequest {
  string serviceId = 1;
  repeated string modules = 2;
}

service RuntimeService {
  rpc OnEvent(OnDeployRequest) returns (stream FunctionEvent);
}
