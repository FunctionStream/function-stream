/*
 * Copyright 2024 Function Stream Org.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
option go_package = "fs/func/grpc_func/proto";
package fs_func;

// The request message for the Process method.
message Event {
  string payload = 1;
}

message Response {
  enum Status {
    OK = 0;
    ERROR = 1;
  }
  Status status = 1;
  optional string message = 2;
}

// The request message for the SetState method.
message SetStateRequest {
  string key = 1;
  string value = 2;
}

message ConnectRequest {

}

message FunctionStatus {
  string name = 1;
  enum Status {
    CREATING = 0;
    RUNNING = 1;
    DELETING = 2;
    DELETED = 3;
    FAILED = 4;
  }
  Status status = 2;
  optional string details = 3;
}

service FSReconcile {
  rpc Reconcile(ConnectRequest) returns (stream FunctionStatus) {}
  rpc UpdateStatus(FunctionStatus) returns (Response) {}
}

message FunctionProcessRequest {
  string name = 1;
}

service Function {
  rpc Process(FunctionProcessRequest) returns (stream Event) {}
  rpc Output(Event) returns (Response) {}
}
