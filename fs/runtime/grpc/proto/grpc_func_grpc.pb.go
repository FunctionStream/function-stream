// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FSReconcileClient is the client API for FSReconcile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FSReconcileClient interface {
	Reconcile(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (FSReconcile_ReconcileClient, error)
	UpdateStatus(ctx context.Context, in *FunctionStatus, opts ...grpc.CallOption) (*Response, error)
}

type fSReconcileClient struct {
	cc grpc.ClientConnInterface
}

func NewFSReconcileClient(cc grpc.ClientConnInterface) FSReconcileClient {
	return &fSReconcileClient{cc}
}

func (c *fSReconcileClient) Reconcile(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (FSReconcile_ReconcileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FSReconcile_ServiceDesc.Streams[0], "/fs_func.FSReconcile/Reconcile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fSReconcileReconcileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FSReconcile_ReconcileClient interface {
	Recv() (*FunctionStatus, error)
	grpc.ClientStream
}

type fSReconcileReconcileClient struct {
	grpc.ClientStream
}

func (x *fSReconcileReconcileClient) Recv() (*FunctionStatus, error) {
	m := new(FunctionStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fSReconcileClient) UpdateStatus(ctx context.Context, in *FunctionStatus, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/fs_func.FSReconcile/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FSReconcileServer is the server API for FSReconcile service.
// All implementations must embed UnimplementedFSReconcileServer
// for forward compatibility
type FSReconcileServer interface {
	Reconcile(*ConnectRequest, FSReconcile_ReconcileServer) error
	UpdateStatus(context.Context, *FunctionStatus) (*Response, error)
	mustEmbedUnimplementedFSReconcileServer()
}

// UnimplementedFSReconcileServer must be embedded to have forward compatible implementations.
type UnimplementedFSReconcileServer struct {
}

func (UnimplementedFSReconcileServer) Reconcile(*ConnectRequest, FSReconcile_ReconcileServer) error {
	return status.Errorf(codes.Unimplemented, "method Reconcile not implemented")
}
func (UnimplementedFSReconcileServer) UpdateStatus(context.Context, *FunctionStatus) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedFSReconcileServer) mustEmbedUnimplementedFSReconcileServer() {}

// UnsafeFSReconcileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FSReconcileServer will
// result in compilation errors.
type UnsafeFSReconcileServer interface {
	mustEmbedUnimplementedFSReconcileServer()
}

func RegisterFSReconcileServer(s grpc.ServiceRegistrar, srv FSReconcileServer) {
	s.RegisterService(&FSReconcile_ServiceDesc, srv)
}

func _FSReconcile_Reconcile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FSReconcileServer).Reconcile(m, &fSReconcileReconcileServer{stream})
}

type FSReconcile_ReconcileServer interface {
	Send(*FunctionStatus) error
	grpc.ServerStream
}

type fSReconcileReconcileServer struct {
	grpc.ServerStream
}

func (x *fSReconcileReconcileServer) Send(m *FunctionStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _FSReconcile_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FSReconcileServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs_func.FSReconcile/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FSReconcileServer).UpdateStatus(ctx, req.(*FunctionStatus))
	}
	return interceptor(ctx, in, info, handler)
}

// FSReconcile_ServiceDesc is the grpc.ServiceDesc for FSReconcile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FSReconcile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fs_func.FSReconcile",
	HandlerType: (*FSReconcileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateStatus",
			Handler:    _FSReconcile_UpdateStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Reconcile",
			Handler:       _FSReconcile_Reconcile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fs/runtime/grpc/proto/grpc_func.proto",
}

// FunctionClient is the client API for Function service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FunctionClient interface {
	Process(ctx context.Context, in *FunctionProcessRequest, opts ...grpc.CallOption) (Function_ProcessClient, error)
	Output(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Response, error)
	PutState(ctx context.Context, in *PutStateRequest, opts ...grpc.CallOption) (*Response, error)
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
}

type functionClient struct {
	cc grpc.ClientConnInterface
}

func NewFunctionClient(cc grpc.ClientConnInterface) FunctionClient {
	return &functionClient{cc}
}

func (c *functionClient) Process(ctx context.Context, in *FunctionProcessRequest, opts ...grpc.CallOption) (Function_ProcessClient, error) {
	stream, err := c.cc.NewStream(ctx, &Function_ServiceDesc.Streams[0], "/fs_func.Function/Process", opts...)
	if err != nil {
		return nil, err
	}
	x := &functionProcessClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Function_ProcessClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type functionProcessClient struct {
	grpc.ClientStream
}

func (x *functionProcessClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *functionClient) Output(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/fs_func.Function/Output", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionClient) PutState(ctx context.Context, in *PutStateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/fs_func.Function/PutState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, "/fs_func.Function/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FunctionServer is the server API for Function service.
// All implementations must embed UnimplementedFunctionServer
// for forward compatibility
type FunctionServer interface {
	Process(*FunctionProcessRequest, Function_ProcessServer) error
	Output(context.Context, *Event) (*Response, error)
	PutState(context.Context, *PutStateRequest) (*Response, error)
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	mustEmbedUnimplementedFunctionServer()
}

// UnimplementedFunctionServer must be embedded to have forward compatible implementations.
type UnimplementedFunctionServer struct {
}

func (UnimplementedFunctionServer) Process(*FunctionProcessRequest, Function_ProcessServer) error {
	return status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedFunctionServer) Output(context.Context, *Event) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Output not implemented")
}
func (UnimplementedFunctionServer) PutState(context.Context, *PutStateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutState not implemented")
}
func (UnimplementedFunctionServer) GetState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedFunctionServer) mustEmbedUnimplementedFunctionServer() {}

// UnsafeFunctionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FunctionServer will
// result in compilation errors.
type UnsafeFunctionServer interface {
	mustEmbedUnimplementedFunctionServer()
}

func RegisterFunctionServer(s grpc.ServiceRegistrar, srv FunctionServer) {
	s.RegisterService(&Function_ServiceDesc, srv)
}

func _Function_Process_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FunctionProcessRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FunctionServer).Process(m, &functionProcessServer{stream})
}

type Function_ProcessServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type functionProcessServer struct {
	grpc.ServerStream
}

func (x *functionProcessServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Function_Output_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionServer).Output(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs_func.Function/Output",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionServer).Output(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Function_PutState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionServer).PutState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs_func.Function/PutState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionServer).PutState(ctx, req.(*PutStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Function_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs_func.Function/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Function_ServiceDesc is the grpc.ServiceDesc for Function service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Function_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fs_func.Function",
	HandlerType: (*FunctionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Output",
			Handler:    _Function_Output_Handler,
		},
		{
			MethodName: "PutState",
			Handler:    _Function_PutState_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _Function_GetState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Process",
			Handler:       _Function_Process_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fs/runtime/grpc/proto/grpc_func.proto",
}
