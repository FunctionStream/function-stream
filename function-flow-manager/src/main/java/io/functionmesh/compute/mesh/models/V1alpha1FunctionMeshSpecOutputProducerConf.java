/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.15.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.functionmesh.compute.mesh.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.functionmesh.compute.mesh.models.V1alpha1FunctionMeshSpecInputCryptoConfig;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * V1alpha1FunctionMeshSpecOutputProducerConf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-07T12:35:29.394Z[Etc/UTC]")
public class V1alpha1FunctionMeshSpecOutputProducerConf {
  public static final String SERIALIZED_NAME_BATCH_BUILDER = "batchBuilder";
  @SerializedName(SERIALIZED_NAME_BATCH_BUILDER)
  private String batchBuilder;

  public static final String SERIALIZED_NAME_CRYPTO_CONFIG = "cryptoConfig";
  @SerializedName(SERIALIZED_NAME_CRYPTO_CONFIG)
  private V1alpha1FunctionMeshSpecInputCryptoConfig cryptoConfig;

  public static final String SERIALIZED_NAME_MAX_PENDING_MESSAGES = "maxPendingMessages";
  @SerializedName(SERIALIZED_NAME_MAX_PENDING_MESSAGES)
  private Integer maxPendingMessages;

  public static final String SERIALIZED_NAME_MAX_PENDING_MESSAGES_ACROSS_PARTITIONS = "maxPendingMessagesAcrossPartitions";
  @SerializedName(SERIALIZED_NAME_MAX_PENDING_MESSAGES_ACROSS_PARTITIONS)
  private Integer maxPendingMessagesAcrossPartitions;

  public static final String SERIALIZED_NAME_USE_THREAD_LOCAL_PRODUCERS = "useThreadLocalProducers";
  @SerializedName(SERIALIZED_NAME_USE_THREAD_LOCAL_PRODUCERS)
  private Boolean useThreadLocalProducers;


  public V1alpha1FunctionMeshSpecOutputProducerConf batchBuilder(String batchBuilder) {
    
    this.batchBuilder = batchBuilder;
    return this;
  }

   /**
   * Get batchBuilder
   * @return batchBuilder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBatchBuilder() {
    return batchBuilder;
  }


  public void setBatchBuilder(String batchBuilder) {
    this.batchBuilder = batchBuilder;
  }


  public V1alpha1FunctionMeshSpecOutputProducerConf cryptoConfig(V1alpha1FunctionMeshSpecInputCryptoConfig cryptoConfig) {
    
    this.cryptoConfig = cryptoConfig;
    return this;
  }

   /**
   * Get cryptoConfig
   * @return cryptoConfig
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1alpha1FunctionMeshSpecInputCryptoConfig getCryptoConfig() {
    return cryptoConfig;
  }


  public void setCryptoConfig(V1alpha1FunctionMeshSpecInputCryptoConfig cryptoConfig) {
    this.cryptoConfig = cryptoConfig;
  }


  public V1alpha1FunctionMeshSpecOutputProducerConf maxPendingMessages(Integer maxPendingMessages) {
    
    this.maxPendingMessages = maxPendingMessages;
    return this;
  }

   /**
   * Get maxPendingMessages
   * @return maxPendingMessages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMaxPendingMessages() {
    return maxPendingMessages;
  }


  public void setMaxPendingMessages(Integer maxPendingMessages) {
    this.maxPendingMessages = maxPendingMessages;
  }


  public V1alpha1FunctionMeshSpecOutputProducerConf maxPendingMessagesAcrossPartitions(Integer maxPendingMessagesAcrossPartitions) {
    
    this.maxPendingMessagesAcrossPartitions = maxPendingMessagesAcrossPartitions;
    return this;
  }

   /**
   * Get maxPendingMessagesAcrossPartitions
   * @return maxPendingMessagesAcrossPartitions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMaxPendingMessagesAcrossPartitions() {
    return maxPendingMessagesAcrossPartitions;
  }


  public void setMaxPendingMessagesAcrossPartitions(Integer maxPendingMessagesAcrossPartitions) {
    this.maxPendingMessagesAcrossPartitions = maxPendingMessagesAcrossPartitions;
  }


  public V1alpha1FunctionMeshSpecOutputProducerConf useThreadLocalProducers(Boolean useThreadLocalProducers) {
    
    this.useThreadLocalProducers = useThreadLocalProducers;
    return this;
  }

   /**
   * Get useThreadLocalProducers
   * @return useThreadLocalProducers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getUseThreadLocalProducers() {
    return useThreadLocalProducers;
  }


  public void setUseThreadLocalProducers(Boolean useThreadLocalProducers) {
    this.useThreadLocalProducers = useThreadLocalProducers;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1FunctionMeshSpecOutputProducerConf v1alpha1FunctionMeshSpecOutputProducerConf = (V1alpha1FunctionMeshSpecOutputProducerConf) o;
    return Objects.equals(this.batchBuilder, v1alpha1FunctionMeshSpecOutputProducerConf.batchBuilder) &&
        Objects.equals(this.cryptoConfig, v1alpha1FunctionMeshSpecOutputProducerConf.cryptoConfig) &&
        Objects.equals(this.maxPendingMessages, v1alpha1FunctionMeshSpecOutputProducerConf.maxPendingMessages) &&
        Objects.equals(this.maxPendingMessagesAcrossPartitions, v1alpha1FunctionMeshSpecOutputProducerConf.maxPendingMessagesAcrossPartitions) &&
        Objects.equals(this.useThreadLocalProducers, v1alpha1FunctionMeshSpecOutputProducerConf.useThreadLocalProducers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchBuilder, cryptoConfig, maxPendingMessages, maxPendingMessagesAcrossPartitions, useThreadLocalProducers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1FunctionMeshSpecOutputProducerConf {\n");
    sb.append("    batchBuilder: ").append(toIndentedString(batchBuilder)).append("\n");
    sb.append("    cryptoConfig: ").append(toIndentedString(cryptoConfig)).append("\n");
    sb.append("    maxPendingMessages: ").append(toIndentedString(maxPendingMessages)).append("\n");
    sb.append("    maxPendingMessagesAcrossPartitions: ").append(toIndentedString(maxPendingMessagesAcrossPartitions)).append("\n");
    sb.append("    useThreadLocalProducers: ").append(toIndentedString(useThreadLocalProducers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

